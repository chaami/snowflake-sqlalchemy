[tox]
envlist = fix_lint,
          py{37,38,39,310}{,-pandas},
          coverage

skipdist = true
skip_missing_interpreters = true

[testenv]
description = run the tests with pytest under {basepython}
extras = development
deps =
    pip
    pandas
setenv =
    COVERAGE_FILE = {env:COVERAGE_FILE:{toxworkdir}/.coverage.{envname}}
commands = pytest \
           --cov "snowflake.sqlalchemy" \
           --junitxml {toxworkdir}/junit.{envname}.xml \
           {posargs} test

[testenv:coverage]
description = [run locally after tests]: combine coverage data and create report;
              generates a diff coverage against origin/master (can be changed by setting DIFF_AGAINST env var)
deps = {[testenv]deps}
       coverage >= 4.4.1, < 5
       diff_cover
skip_install = True
passenv = DIFF_AGAINST
setenv = COVERAGE_FILE={toxworkdir}/.coverage
commands = coverage combine
           coverage report -m
           coverage xml -o {toxworkdir}/coverage.xml
           coverage html -d {toxworkdir}/htmlcov
           diff-cover --compare-branch {env:DIFF_AGAINST:origin/master} {toxworkdir}/coverage.xml
depends = py35, py36, py37, pypy, pypy3

[testenv:flake8]
description = check code style with flake8
skip_install = true
deps = flake8
commands = flake8 {posargs}

[testenv:fix_lint]
description = format the code base to adhere to our styles, and complain about what we cannot do automatically
passenv =
    PROGRAMDATA
deps =
    {[testenv]deps}
    pre-commit >= 1.14.4, < 2
skip_install = True
commands = /bin/bash -c 'pre-commit run --files **/*'
           python -c 'import pathlib; print("hint: run \{\} install to add checks as pre-commit hook".format(pathlib.Path(r"{envdir}") / "bin" / "pre-commit"))'

[testenv:dev]
description = create dev environment
extras = pandas, development
usedevelop = True
commands = python -m pip list --format=columns
           python -c "print(r'{envpython}')"

[pytest]
addopts = -ra --strict-markers
junit_family = legacy
log_level = info
markers =
    # Cloud provider markers
    aws: tests for Amazon Cloud storage
    azure: tests for Azure Cloud storage
    gcp: tests for Google Cloud storage
    # Other markers
    timeout: tests that need a timeout time
    internal: tests that could but should only run on our internal CI
    external: tests that could but should only run on our external CI

[isort]
multi_line_output = 3
include_trailing_comma = True
force_grid_wrap = 0
line_length = 120
known_third_party =conftest,mock,numpy,pandas,parameters,pytest,pytz,setuptools,six,snowflake,sqlalchemy
